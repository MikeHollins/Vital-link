import { GoogleGenerativeAI } from '@google/generative-ai';

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_AI_API_KEY!);

export async function analyzeVitalLinkTranslationIssues() {
  const model = genAI.getGenerativeModel({ model: 'gemini-pro' });

  const translationGuide = `
Based on this code analysis, here are the most common reasons why only a portion of UI text might be translating when switching languages:

1. Missing data-translate-key Attribute in HTML:
Your primary translation mechanism relies on HTML elements having a data-translate-key="yourKey" attribute. The translatePage function looks for these keys.
Check: Go through your HTML. Any text element that isn't translating probably doesn't have this attribute, or the attribute is misspelled.
Example: If you have <p>Patient Details</p> and it's not translating, it needs to be <p data-translate-key="patientDetailsTitle">Patient Details</p>

2. Key Missing from the translations Object:
Even if an element has data-translate-key="someKey", if "someKey" doesn't exist as an entry within translations.es.someKey or translations.fr.someKey, it won't be translated.

3. Hardcoded Text in Dynamically Generated Content:
Your application dynamically generates a lot of HTML using JavaScript functions. Inside these functions, you are correctly using translations[currentLanguage].someKey for many parts, but you need to review all HTML strings generated by JavaScript functions.

4. Placeholders and Specific IDs Not Covered:
Your translatePage function has a section where it explicitly updates elements by ID, especially input placeholders.

5. Complex HTML Structures within data-translate-key Elements:
Your translatePage function has logic to handle elements with child nodes.

6. Content Added After Initial Translation:
If some UI elements are added to the page after the languageSwitch event initially triggers translatePage, that new content won't be translated.
`;

  const analysisPrompt = `
As a React i18next expert, analyze this VitalLink health platform's translation implementation issues:

TRANSLATION GUIDE PROVIDED:
${translationGuide}

CURRENT VITALLINK SETUP:
- React with TypeScript
- i18next with react-i18next
- HTTP backend loading from /locales/{{lng}}/{{ns}}.json
- LanguageDetector for browser detection
- Supported languages: en, es, zh, ms, ta, ru, de
- Namespaces: common, dashboard, health, privacy, settings

OBSERVED ISSUES IN VITALLINK:
1. Console shows "Functions are not valid as a React child" errors
2. Some components have hardcoded strings like {Settings} instead of proper translation usage
3. Mixed usage of useTranslation hook vs direct string rendering
4. Settings component shows translation function instead of translated text

PROVIDE SPECIFIC FIXES FOR:
1. How to properly use useTranslation hook in React components
2. Fix "Functions are not valid as React child" errors in Settings component
3. Convert hardcoded strings to proper translation key usage
4. Ensure all user-visible text uses i18next translation system
5. Best practices for React component translation integration

Focus on practical code examples that will fix the VitalLink application's translation issues.
`;

  try {
    const result = await model.generateContent(analysisPrompt);
    const response = await result.response;
    const analysis = response.text();

    console.log('ðŸ¤– Gemini AI VitalLink Translation Analysis:');
    console.log('='.repeat(80));
    console.log(analysis);
    console.log('='.repeat(80));

    return analysis;
  } catch (error) {
    console.error('Gemini AI analysis failed:', error);
    return null;
  }
}

export async function generateComponentFixes() {
  const model = genAI.getGenerativeModel({ model: 'gemini-pro' });

  const fixPrompt = `
Generate specific code fixes for VitalLink React components with translation issues:

COMPONENT ISSUES TO FIX:
1. Settings component: {Settings} renders as function instead of text
2. Various components: Missing useTranslation hook implementation
3. Hardcoded strings: Need conversion to translation keys

REQUIREMENTS:
1. Import and use useTranslation from 'react-i18next'
2. Replace all hardcoded UI strings with translation keys
3. Fix React child function errors
4. Use proper i18next patterns for health platform

PROVIDE:
1. Corrected import statements
2. Proper useTranslation hook usage
3. Translation key examples for health platform
4. Fixed component rendering patterns

Generate practical code examples for immediate implementation.
`;

  try {
    const result = await model.generateContent(fixPrompt);
    const response = await result.response;
    const fixes = response.text();

    console.log('ðŸ”§ Gemini AI Component Fixes:');
    console.log('='.repeat(80));
    console.log(fixes);
    console.log('='.repeat(80));

    return fixes;
  } catch (error) {
    console.error('Gemini AI fix generation failed:', error);
    return null;
  }
}

export default {
  analyzeVitalLinkTranslationIssues,
  generateComponentFixes
};