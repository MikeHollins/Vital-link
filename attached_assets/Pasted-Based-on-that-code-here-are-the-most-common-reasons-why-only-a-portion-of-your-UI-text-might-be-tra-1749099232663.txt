Based on that code, here are the most common reasons why only a portion of your UI text might be translating when you switch languages:

Missing data-translate-key Attribute in HTML:

Your primary translation mechanism relies on HTML elements having a data-translate-key="yourKey" attribute. The translatePage function looks for these keys.
Check: Go through your HTML. Any text element that isn't translating probably doesn't have this attribute, or the attribute is misspelled.
Example: If you have <p>Patient Details</p> and it's not translating, it needs to be <p data-translate-key="patientDetailsTitle">Patient Details</p> (assuming patientDetailsTitle is a key in your translations object).
Key Missing from the translations Object:

Even if an element has data-translate-key="someKey", if "someKey" doesn't exist as an entry within translations.es.someKey or translations.fr.someKey, it won't be translated into Spanish or French.
Check: Verify that every data-translate-key you've used in your HTML has a corresponding entry for each language in your translations JavaScript object.
Hardcoded Text in Dynamically Generated Content:

Your application dynamically generates a lot of HTML (e.g., patient dashboards, lists of appointments, medication details, messages) using JavaScript functions like renderPatientDashboard, renderAppointmentsForPatient, etc.
Inside these functions, you are correctly using translations[currentLanguage].someKey for many parts (e.g., <h2>${translations[currentLanguage].dashboardTitle || 'Patient Dashboard'}</h2>). This is great!
Check: Carefully review all the HTML strings generated by these JavaScript functions. If you find any plain text strings that should be translated but are just written directly (e.g., innerHTML += '<div>Status: Active</div>'; instead of innerHTML += \&lt;div>${translations[currentLanguage].statusLabel || 'Status'}: ${translations[currentLanguage].statusActive || 'Active'}&lt;/div>`;`), those will not be translated.
Placeholders and Specific IDs Not Covered:

Your translatePage function has a section where it explicitly updates elements by ID, especially input placeholders (like usernameInput.placeholder = translations[lang].usernamePlaceholder).
Check: If a placeholder or a specific piece of text (that doesn't use data-translate-key) isn't translating, ensure its ID is correctly targeted in this section of translatePage and that the corresponding key exists in your translations object.
Complex HTML Structures within data-translate-key Elements:

Your translatePage function has logic to handle elements with child nodes:
JavaScript

if (element.children.length > 0 && element.firstChild.nodeType === Node.TEXT_NODE) {
    element.firstChild.textContent = translations[lang][key];
} else {
    element.textContent = translations[lang][key];
}
This tries to translate only the first text node if child elements exist (e.g., to preserve a <span> within a translated paragraph).
Check: If you have a structure like <p data-translate-key="complexKey">Text Part 1 <span>Some Span</span> Text Part 2</p>, only "Text Part 1 " would be translated by complexKey. "Text Part 2" would be ignored by this specific logic. If complexKey was intended to cover everything, this could be an issue. You might need separate data-translate-key attributes on different parts or adjust the dynamic generation to build the translated string more carefully.
Content Added After Initial Translation:

If some UI elements are added to the page after the languageSwitch event initially triggers translatePage (e.g., a new modal that's generated on the fly without being part of the initial HTML), that new content won't be translated unless translatePage(currentLanguage) is called again after that content is added to the DOM.
How to Debug:

Identify Untranslated Text: Note exactly which pieces of text are not changing.
Inspect the HTML: Right-click on the untranslated text in your browser and choose "Inspect Element."
Does it have a data-translate-key?
Is the key spelled correctly?
Check JavaScript translations Object:
Does the key exist for the selected language?
Check Dynamic Generation Functions: If the text is part of a dynamically generated list or section, look at the JavaScript function that creates that HTML. Is it using translations[currentLanguage].yourKey or is the text hardcoded?
By systematically checking these points, you should be able to find why certain parts of your UI aren't being translated. Let me know if you focus on a specific untranslated element, and I can try to help you pinpoint the issue in the code!